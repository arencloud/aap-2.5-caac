---
- name: Add organizations
  ansible.platform.organization:
    name:                               "{{ __platform_organizations_item.name | mandatory }}"
    description:                        "{{ __platform_organizations_item.description | default(( '' if platform_configuration_organizations_enforce_defaults | default('') else omit), true) }}"
    custom_virtualenv:                  "{{ __platform_organizations_item.custom_virtualenv | default(omit, true) }}"
    max_hosts:                          "{{ __platform_organizations_item.max_hosts | default(omit, true) }}"
    instance_groups:                    "{{ __platform_organizations_item.instance_groups | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true) }}"
    default_environment:                "{{ (__platform_organizations_item.default_environment.name | default(__platform_organizations_item.default_environment | default(__platform_organizations_item.execution_environment | default(omit)))) if (assign_default_ee_to_org is defined and assign_default_ee_to_org) else omit }}"
    galaxy_credentials:                 "{{ (__platform_organizations_item.galaxy_credentials | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true)) if (assign_galaxy_credentials_to_org is defined and assign_galaxy_credentials_to_org) else omit }}"
    notification_templates_approvals:   "{{ (__platform_organizations_item.related.notification_templates_approvals | map(attribute='name') | list if __platform_organizations_item.related.notification_templates_approvals is defined) | default(__platform_organizations_item.notification_templates_approvals) | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_started:     "{{ (__platform_organizations_item.related.notification_templates_started | map(attribute='name') | list if __platform_organizations_item.related.notification_templates_started is defined) | default(__platform_organizations_item.notification_templates_started) | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_success:     "{{ (__platform_organizations_item.related.notification_templates_success | map(attribute='name') | list if __platform_organizations_item.related.notification_templates_success is defined) | default(__platform_organizations_item.notification_templates_success) | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_error:       "{{ (__platform_organizations_item.related.notification_templates_error | map(attribute='name') | list if __platform_organizations_item.related.notification_templates_error is defined) | default(__platform_organizations_item.notification_templates_error) | default(( [] if platform_configuration_organizations_enforce_defaults else omit), true) }}"
    state:                              "{{ __platform_organizations_item.state | default(platform_state | default('present')) }}"

    # Role Standard Options
    gateway_username:                "{{ gateway_username | default(omit, true) }}"
    gateway_password:                "{{ gateway_password | default(omit, true) }}"
    gateway_token:              "{{ gateway_token | default(omit, true) }}"
    gateway_request_timeout:                    "{{ gateway_request_timeout | default(omit, true) }}"
    gateway_hostname:                    "{{ gateway_hostname | default(omit, true) }}"
    gateway_config_file:             "{{ gateway_config_file | default(omit, true) }}"
    gateway_validate_certs:                     "{{ gateway_validate_certs | default(omit) }}"
  loop: "{{ platform_organizations }}"
  loop_control:
    loop_var: __platform_organizations_item
  # no_log: "{{ platform_configuration_organizations_secure_logging }}"
  async: 1000
  poll: 0
  register: __organizations_job_async
  changed_when: not __organizations_job_async.changed
  vars:
    ansible_async_dir: '{{ platform_configuration_async_dir }}'

- name: "Configure Platform Organizations | Wait for finish the organization creation"
  ansible.builtin.async_status:
    jid: "{{ __organizations_job_async_results_item.ansible_job_id }}"
  register: __organizations_job_async_result
  until: __organizations_job_async_result.finished
  retries: "{{ platform_configuration_organizations_async_retries }}"
  delay: "{{ platform_configuration_organizations_async_delay }}"
  loop: "{{ __organizations_job_async.results }}"
  loop_control:
    loop_var: __organizations_job_async_results_item
  when: __organizations_job_async_results_item.ansible_job_id is defined
  no_log: "{{ platform_configuration_organizations_secure_logging }}"
  vars:
    ansible_async_dir: '{{ platform_configuration_async_dir }}'
...